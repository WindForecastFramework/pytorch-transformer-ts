Timer unit: 1e-09 s

Total time: 0.000861 s
File: /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py
Function: _create_instance_splitter at line 242

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   242                                               @profile
   243                                               def _create_instance_splitter(self, module: InformerLightningModule, mode: str):
   244         2       2000.0   1000.0      0.2          assert mode in ["training", "validation", "test"]
   245                                           
   246         4       2000.0    500.0      0.2          instance_sampler = {
   247         2       2000.0   1000.0      0.2              "training": self.train_sampler,
   248         2       1000.0    500.0      0.1              "validation": self.validation_sampler,
   249         2      91000.0  45500.0     10.6              "test": TestSplitSampler(),
   250         2          0.0      0.0      0.0          }[mode]
   251                                                   
   252         4     713000.0 178250.0     82.8          return InstanceSplitter(
   253         2       2000.0   1000.0      0.2              target_field=FieldName.TARGET,
   254         2       2000.0   1000.0      0.2              is_pad_field=FieldName.IS_PAD,
   255         2          0.0      0.0      0.0              start_field=FieldName.START,
   256         2       2000.0   1000.0      0.2              forecast_start_field=FieldName.FORECAST_START,
   257         2          0.0      0.0      0.0              instance_sampler=instance_sampler,
   258         2      20000.0  10000.0      2.3              past_length=module.model._past_length,
   259         2          0.0      0.0      0.0              future_length=self.prediction_length,
   260         2          0.0      0.0      0.0              time_series_fields=[
   261         2          0.0      0.0      0.0                  FieldName.FEAT_TIME,
   262         2       2000.0   1000.0      0.2                  FieldName.OBSERVED_VALUES,
   263                                                       ],
   264         2      22000.0  11000.0      2.6              dummy_value=self.distr_output.value_in_support,
   265                                                   )

Total time: 0.00093 s
File: /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py
Function: create_training_data_loader at line 267

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   267                                               @profile
   268                                               def create_training_data_loader(
   269                                                   self,
   270                                                   data: Dataset,
   271                                                   module: InformerLightningModule,
   272                                                   shuffle_buffer_length: Optional[int] = None,
   273                                                   **kwargs,
   274                                               ) -> Iterable:
   275         1      44000.0  44000.0      4.7          data = Cyclic(data).stream() # will just repeat over same dataset if we only provide one
   276         2     576000.0 288000.0     61.9          instances = self._create_instance_splitter(module, "training").apply(
   277         1          0.0      0.0      0.0              data, is_train=True
   278                                                   )
   279         2     309000.0 154500.0     33.2          return as_stacked_batches(
   280         1          0.0      0.0      0.0              instances,
   281         1          0.0      0.0      0.0              batch_size=self.batch_size,
   282         1          0.0      0.0      0.0              shuffle_buffer_length=shuffle_buffer_length,
   283         1          0.0      0.0      0.0              field_names=TRAINING_INPUT_NAMES,
   284         1       1000.0   1000.0      0.1              output_type=torch.tensor,
   285         1          0.0      0.0      0.0              num_batches_per_epoch=self.num_batches_per_epoch,
   286                                                   )

Total time: 0.001869 s
File: /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py
Function: create_predictor at line 307

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   307                                               @profile
   308                                               def create_predictor(
   309                                                   self,
   310                                                   transformation: Transformation,
   311                                                   module: InformerLightningModule,
   312                                                   **kwargs # CHANGE
   313                                               ) -> PyTorchPredictor:
   314         1     346000.0 346000.0     18.5          prediction_splitter = self._create_instance_splitter(module, "test")
   315                                                   
   316         3    1479000.0 493000.0     79.1          return PyTorchPredictor(
   317         1      25000.0  25000.0      1.3              input_transform=transformation + prediction_splitter,
   318         1          0.0      0.0      0.0              input_names=PREDICTION_INPUT_NAMES,
   319         1       2000.0   2000.0      0.1              prediction_net=module.model,
   320         1          0.0      0.0      0.0              batch_size=self.batch_size,
   321         1          0.0      0.0      0.0              prediction_length=self.prediction_length,
   322         1      17000.0  17000.0      0.9              device=torch.device("cuda" if torch.cuda.is_available() else "cpu"),
   323         1          0.0      0.0      0.0              **kwargs
   324                                                   )

Total time: 0.002616 s
File: /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py
Function: create_transformation at line 162

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   162                                               @profile 
   163                                               def create_transformation(self, use_lazyframe=None) -> Transformation:
   164         1       3000.0   3000.0      0.1          if use_lazyframe is None and hasattr(self, "use_lazyframe"):
   165         1       3000.0   3000.0      0.1              use_lazyframe = self.use_lazyframe
   166                                                   else:
   167                                                       use_lazyframe = False
   168                                                   # this is called in src/gluonts/torch/model/estimator.py
   169         1       2000.0   2000.0      0.1          remove_field_names = []
   170         1       3000.0   3000.0      0.1          if self.num_feat_static_real == 0:
   171         1       2000.0   2000.0      0.1              remove_field_names.append(FieldName.FEAT_STATIC_REAL)
   172         1          0.0      0.0      0.0          if self.num_feat_dynamic_real == 0:
   173         1       3000.0   3000.0      0.1              remove_field_names.append(FieldName.FEAT_DYNAMIC_REAL)
   174                                                   
   175         2     244000.0 122000.0      9.3          return Chain(
   176         4     455000.0 113750.0     17.4              [RemoveFields(field_names=remove_field_names)]
   177                                                       + (
   178                                                           [SetField(output_field=FieldName.FEAT_STATIC_CAT, value=[0])]
   179         1          0.0      0.0      0.0                  if not self.num_feat_static_cat > 0
   180         1          0.0      0.0      0.0                  else []
   181                                                       )
   182                                                       + (
   183         1     101000.0 101000.0      3.9                  [SetField(output_field=FieldName.FEAT_STATIC_REAL, value=[0.0])]
   184         1          0.0      0.0      0.0                  if not self.num_feat_static_real > 0
   185                                                           else []
   186                                                       )
   187         1          0.0      0.0      0.0              + [
   188         2     168000.0  84000.0      6.4                  AsNumpyArray(
   189         1          0.0      0.0      0.0                      field=FieldName.FEAT_STATIC_CAT,
   190         1          0.0      0.0      0.0                      expected_ndim=1,
   191         1          0.0      0.0      0.0                      dtype=int,
   192                                                           ),
   193         2      48000.0  24000.0      1.8                  AsNumpyArray(
   194         1          0.0      0.0      0.0                      field=FieldName.FEAT_STATIC_REAL,
   195         1          0.0      0.0      0.0                      expected_ndim=1,
   196                                                           ),
   197                                                           
   198                                                           # AsLazyFrame(
   199                                                           #     field=FieldName.FEAT_STATIC_REAL,
   200                                                           #     expected_ndim=1
   201                                                           # ),
   202                                                           AsLazyFrame(
   203                                                               field=FieldName.TARGET,
   204                                                               expected_ndim=1 + len(self.distr_output.event_shape)
   205         2      23000.0  11500.0      0.9                  ) if use_lazyframe else AsNumpyArray(
   206         1       2000.0   2000.0      0.1                      field=FieldName.TARGET,
   207                                                               # in the following line, we add 1 for the time dimension 
   208         1      12000.0  12000.0      0.5                      expected_ndim=1 + len(self.distr_output.event_shape),
   209                                                               # expected_ndim=1 + 1 + len(self.distr_output.event_shape),
   210                                                           ),
   211         2     402000.0 201000.0     15.4                  AddObservedValuesIndicator(
   212         1       1000.0   1000.0      0.0                      target_field=FieldName.TARGET,
   213         1          0.0      0.0      0.0                      output_field=FieldName.OBSERVED_VALUES,
   214         1          0.0      0.0      0.0                      dtype=pl.Float32 if use_lazyframe else np.float32
   215                                                           ),
   216         2     611000.0 305500.0     23.4                  AddTimeFeatures(
   217         1     112000.0 112000.0      4.3                      start_field=FieldName.START,
   218         1       1000.0   1000.0      0.0                      target_field=FieldName.TARGET,
   219         1          0.0      0.0      0.0                      output_field=FieldName.FEAT_TIME,
   220         1          0.0      0.0      0.0                      time_features=self.time_features,
   221         1          0.0      0.0      0.0                      pred_length=self.prediction_length,
   222                                                               # dtype=pl.Float32
   223                                                           ),
   224         2     186000.0  93000.0      7.1                  AddAgeFeature(
   225         1          0.0      0.0      0.0                      target_field=FieldName.TARGET,
   226         1       1000.0   1000.0      0.0                      output_field=FieldName.FEAT_AGE,
   227         1       1000.0   1000.0      0.0                      pred_length=self.prediction_length,
   228         1          0.0      0.0      0.0                      log_scale=True,
   229                                                           ),
   230         2     228000.0 114000.0      8.7                  VstackFeatures(
   231         1          0.0      0.0      0.0                      output_field=FieldName.FEAT_TIME,
   232         2       2000.0   1000.0      0.1                      input_fields=[FieldName.FEAT_TIME, FieldName.FEAT_AGE]
   233                                                               + (
   234                                                                   [FieldName.FEAT_DYNAMIC_REAL]
   235         1       2000.0   2000.0      0.1                          if self.num_feat_dynamic_real > 0
   236         1          0.0      0.0      0.0                          else []
   237                                                               ),
   238                                                           ),
   239                                                       ]
   240                                                   )

Total time: 0.015138 s
File: /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py
Function: create_lightning_module at line 326

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   326                                               @profile
   327                                               def create_lightning_module(self) -> InformerLightningModule:
   328        24      18000.0    750.0      0.1          model_params = dict(
   329         1          0.0      0.0      0.0              freq=self.freq,
   330         1          0.0      0.0      0.0              context_length=self.context_length,
   331         1          0.0      0.0      0.0              prediction_length=self.prediction_length,
   332         3          0.0      0.0      0.0              num_feat_dynamic_real=1 # 1 is for age 
   333         1          0.0      0.0      0.0              + self.num_feat_dynamic_real
   334         1       1000.0   1000.0      0.0              + len(self.time_features),
   335         1          0.0      0.0      0.0              num_feat_static_real=max(1, self.num_feat_static_real),
   336         1       1000.0   1000.0      0.0              num_feat_static_cat=max(1, self.num_feat_static_cat),
   337         1          0.0      0.0      0.0              cardinality=self.cardinality,
   338         1          0.0      0.0      0.0              embedding_dimension=self.embedding_dimension,
   339                                                       # Informer arguments
   340         1          0.0      0.0      0.0              d_model=self.d_model,
   341         1          0.0      0.0      0.0              n_heads=self.n_heads,
   342         1          0.0      0.0      0.0              num_encoder_layers=self.num_encoder_layers,
   343         1          0.0      0.0      0.0              num_decoder_layers=self.num_decoder_layers,
   344         1          0.0      0.0      0.0              activation=self.activation,
   345         1          0.0      0.0      0.0              dropout=self.dropout,
   346         1          0.0      0.0      0.0              dim_feedforward=self.dim_feedforward,
   347         1          0.0      0.0      0.0              attn=self.attn,
   348         1          0.0      0.0      0.0              factor=self.factor,
   349         1          0.0      0.0      0.0              distil=self.distil,
   350                                                       # univariate input
   351         1          0.0      0.0      0.0              input_size=self.input_size,
   352         1          0.0      0.0      0.0              distr_output=self.distr_output,
   353         1          0.0      0.0      0.0              lags_seq=self.lags_seq,
   354         1       1000.0   1000.0      0.0              scaling=self.scaling,
   355         1          0.0      0.0      0.0              num_parallel_samples=self.num_parallel_samples,
   356                                                   )
   357                                           
   358                                                   # return InformerLightningModule(model=model, loss=self.loss) CHANGE
   359         1   15117000.0    2e+07     99.9          return InformerLightningModule(model=model_params)

Total time: 198.099 s
File: /Users/ahenry/Documents/toolboxes/gluonts/src/gluonts/torch/model/estimator.py
Function: train_model at line 149

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   149                                               @profile
   150                                               def train_model(
   151                                                   self,
   152                                                   training_data: Dataset,
   153                                                   validation_data: Optional[Dataset] = None,
   154                                                   from_predictor: Optional[PyTorchPredictor] = None,
   155                                                   shuffle_buffer_length: Optional[int] = None,
   156                                                   cache_data: bool = False,
   157                                                   ckpt_path: Optional[str] = None,
   158                                                   **kwargs,
   159                                               ) -> TrainOutput:
   160         1    2737000.0    3e+06      0.0          transformation = self.create_transformation()
   161                                                    
   162         2    1206000.0 603000.0      0.0          with env._let(max_idle_transforms=max(len(training_data), 100)):
   163         2      52000.0  26000.0      0.0              transformed_training_data: Dataset = transformation.apply(
   164         1       2000.0   2000.0      0.0                  training_data, is_train=True
   165                                                       )
   166                                                       # x = next(iter(transformed_training_data))
   167                                                        
   168         1       3000.0   3000.0      0.0              if cache_data:
   169                                                           transformed_training_data = Cached(transformed_training_data)
   170                                           
   171         1   15223000.0    2e+07      0.0              training_network = self.create_lightning_module()
   172                                           
   173                                                       
   174         2     986000.0 493000.0      0.0              training_data_loader = self.create_training_data_loader(
   175         1       3000.0   3000.0      0.0                  transformed_training_data,
   176         1       2000.0   2000.0      0.0                  training_network,
   177         1       2000.0   2000.0      0.0                  shuffle_buffer_length=shuffle_buffer_length,
   178                                                       )
   179                                                       # x = next(iter(training_data_loader))
   180                                                       
   181         1       3000.0   3000.0      0.0          validation_data_loader = None
   182                                           
   183         1       2000.0   2000.0      0.0          if validation_data is not None:
   184                                                       with env._let(max_idle_transforms=max(len(validation_data), 100)):
   185                                                           transformed_validation_data: Dataset = transformation.apply(
   186                                                               validation_data, is_train=True
   187                                                           )
   188                                                           if cache_data:
   189                                                               transformed_validation_data = Cached(
   190                                                                   transformed_validation_data
   191                                                               )
   192                                           
   193                                                           
   194                                                           validation_data_loader = self.create_validation_data_loader(
   195                                                               transformed_validation_data,
   196                                                               training_network,
   197                                                           )
   198                                           
   199         1       3000.0   3000.0      0.0          if from_predictor is not None:
   200                                                       training_network.load_state_dict(
   201                                                           from_predictor.network.state_dict()
   202                                                       )
   203                                           
   204         1       8000.0   8000.0      0.0          monitor = "train_loss" if validation_data is None else "val_loss"
   205         2    2247000.0    1e+06      0.0          checkpoint = pl.callbacks.ModelCheckpoint(
   206         1       2000.0   2000.0      0.0              monitor=monitor, mode="min", verbose=True
   207                                                   )
   208                                           
   209         1       7000.0   7000.0      0.0          custom_callbacks = self.trainer_kwargs.pop("callbacks", [])
   210         2  439989000.0    2e+08      0.2          trainer = pl.Trainer(
   211         2       6000.0   3000.0      0.0              **{
   212                                                           # "accelerator": "auto",
   213         1       2000.0   2000.0      0.0                  "callbacks": [checkpoint] + custom_callbacks,
   214         1       2000.0   2000.0      0.0                  **self.trainer_kwargs,
   215                                                       }
   216                                                   )
   217                                                   
   218         2        2e+11    1e+11     99.7          trainer.fit(
   219         1     148000.0 148000.0      0.0              model=training_network,
   220         1       8000.0   8000.0      0.0              train_dataloaders=training_data_loader,
   221         1       5000.0   5000.0      0.0              val_dataloaders=validation_data_loader,
   222         1       5000.0   5000.0      0.0              ckpt_path=ckpt_path,
   223                                                   )
   224                                           
   225         1      16000.0  16000.0      0.0          if checkpoint.best_model_path != "":
   226         2      97000.0  48500.0      0.0              logger.info(
   227         1       2000.0   2000.0      0.0                  f"Loading best model from {checkpoint.best_model_path}"
   228                                                       )
   229         2  145538000.0    7e+07      0.1              best_model = training_network.__class__.load_from_checkpoint(
   230         1       2000.0   2000.0      0.0                  checkpoint.best_model_path
   231                                                       )
   232                                                   else:
   233                                                       best_model = training_network
   234                                           
   235         2      22000.0  11000.0      0.0          return TrainOutput(
   236         1       2000.0   2000.0      0.0              transformation=transformation,
   237         1       2000.0   2000.0      0.0              trained_net=best_model,
   238         1       2000.0   2000.0      0.0              trainer=trainer,
   239         1    1909000.0    2e+06      0.0              predictor=self.create_predictor(transformation, best_model, **kwargs), # CHANGE
   240                                                   )

  0.00 seconds - /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py:242 - _create_instance_splitter
  0.00 seconds - /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py:267 - create_training_data_loader
  0.00 seconds - /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py:307 - create_predictor
  0.00 seconds - /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py:162 - create_transformation
  0.02 seconds - /Users/ahenry/Documents/toolboxes/pytorch-transformer-ts/pytorch_transformer_ts/informer/estimator.py:326 - create_lightning_module
198.10 seconds - /Users/ahenry/Documents/toolboxes/gluonts/src/gluonts/torch/model/estimator.py:149 - train_model
